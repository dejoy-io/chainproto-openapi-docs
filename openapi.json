{
    "openapi": "3.0.2",
    "info": {
        "title": "Chainproto API Documentations",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://api.chainproto.io"
        }
    ],
    "security": [
        {
            "ApiKeyAuth": []
        }
    ],
    "x-readme": {
        "samples-languages": [
            "python",
            "node",
            "csharp",
            "java",
            "go",
            "kotlin",
            "ruby",
            "rust",
            "java",
            "shell"
        ]
    },
    "paths":
      {
        "/api/v1/webhooks/{webhook_id}": {
            "get": {
                "description": "Get a webhook.",
                "operationId": "v1.webhook.get",
                "parameters": [
                    {
                        "description": "The webhook's ID or UID",
                        "in": "path",
                        "name": "webhook_id",
                        "required": true,
                        "schema": {
                            "description": "The webhook's ID or UID",
                            "example": "unique-webhook-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Get Webhook",
                "tags": [
                    "Webhook"
                ],
                "x-readme": {
                    "code-samples": [
                        {
                            "name": "JavaScript",
                            "language": "node",
                            "code": "const webhookOut = await chainproto.webhook.get(\"webhook_id\");"
                        },
                        {
                            "name": "TypeScript",
                            "language": "node",
                            "code": "const webhookOut = await chainproto.webhook.get(\"webhook_id\");"
                        },
                        {
                            "name": "Python",
                            "language": "python",
                            "code": "webhook_out = chainproto.webhook.get(\"webhook_id\")"
                        },
                        {
                            "name": "Python (Async)",
                            "language": "python",
                            "code": "webhook_out = await chainproto.webhook.get(\"webhook_id\")"
                        },
                        {
                            "name": "Go",
                            "language": "go",
                            "code": "webhookOut, err := chainprotoClient.Webhook.Get(ctx, \"webhook_id\")"
                        },
                        {
                            "name": "Kotlin",
                            "language": "kotlin",
                            "code": "val webhookOut = chainproto.webhook.get(\"webhook_id\")"
                        },
                        {
                            "name": "Java",
                            "language": "java",
                            "code": "WebhookOut webhookOut = chainproto.getWebhook().get(\"webhook_id\")"
                        },
                        {
                            "name": "Ruby",
                            "language": "ruby",
                            "code": "webhook_out = chainproto.webhook.get(\"webhook_id\")"
                        },
                        {
                            "name": "Rust",
                            "language": "rust",
                            "code": "let webhook_out = chainproto.webhook().get(\"webhook_id\").await?;"
                        },
                        {
                            "name": "C#",
                            "language": "csharp",
                            "code": "var webhookOut = await chainproto.Webhook.GetAsync(\"webhook_id\")"
                        },
                        {
                            "name": "CLI",
                            "language": "Shell",
                            "code": "chainproto webhook get \"webhook_id\""
                        },
                        {
                            "label": "cURL",
                            "language": "shell",
                            "code": "curl -X 'GET' \\\n  'https://api.chainproto.io/api/v1/webhooks/{webhook_id}' \\\n  -H 'X-API-KEY: API_KEY' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                        }
                    ]
                }      
            }
        },
        "/api/v1/webhooks": {
            "post": {
                "description": "Create a new webhook.",
                "operationId": "v1.webhook.create",
                "parameters": [
                    {
                        "description": "Get an existing webhook, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing webhook, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebhookIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebhookOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Create Webhook",
                "tags": [
                    "Webhook"
                ],
                "x-readme": {
                    "code-samples": [
                        {
                            "name": "JavaScript",
                            "language": "node",
                            "code": "const webhookOut = await chainproto.webhook.create({\n    name: \"My first webhook\",\n    uid: \"unique-webhook-identifier\",\n    network: \"eth_mainnet\"\n});"
                        },
                        {
                            "name": "TypeScript",
                            "language": "node",
                            "code": "const webhookOut = await chainproto.webhook.create({\n    name: \"My first webhook\",\n    uid: \"unique-webhook-identifier\",\n    network: \"eth_mainnet\"\n});"
                        },
                        {
                            "name": "Python",
                            "language": "python",
                            "code": "webhook_out = chainproto.webhook.create(WebhookIn(\n    name=\"My first webhook\",\n    uid=\"unique-webhook-identifier\",\n    network: \"eth_mainnet\"\n), None)"
                        },
                        {
                            "name": "Python (Async)",
                            "language": "python",
                            "code": "webhook_out = await chainproto.webhook.create(WebhookIn(\n    name=\"My first webhook\",\n    uid=\"unique-webhook-identifier\",\n    network: \"eth_mainnet\"\n), None)"
                        },
                        {
                            "name": "Go",
                            "language": "go",
                            "code": "webhookOut, err := chainprotoClient.Webhook.Create(ctx, &WebhookIn{\n    Name: \"My first webhook\",\n    Uid: \"unique-webhook-identifier\",\n    Network: \"eth_mainnet\",\n})"
                        },
                        {
                            "name": "Kotlin",
                            "language": "kotlin",
                            "code": "val webhookOut = chainproto.webhook.create(WebhookIn()\n    .name(\"My first webhook\")\n    .uid(\"unique-webhook-identifier\"\n    .network(\"eth_mainnet\"))\n)"
                        },
                        {
                            "name": "Java",
                            "language": "java",
                            "code": "WebhookOut webhookOut = chainproto.getWebhook().create(new WebhookIn()\n    .name(\"My first webhook\")\n    .uid(\"unique-webhook-identifier\"\n    .network(\"eth_mainnet\"))\n)"
                        },
                        {
                            "name": "Ruby",
                            "language": "ruby",
                            "code": "webhook_out = chainproto.webhook.create(Chainproto::WebhookIn.new({\n    \"name\": \"My first webhook\",\n    \"uid\": \"unique-webhook-identifier\"\n    \"network\": \"eth_mainnet\"\n}))"
                        },
                        {
                            "name": "Rust",
                            "language": "rust",
                            "code": "let webhook_out = chainproto.webhook().create(WebhookIn {\n    name: \"My first webhook\",\n    uid: Some(\"unique-webhook-identifier\".to_string()),\n    network: \"eth_mainnet\",\n}, None).await?;"
                        },
                        {
                            "name": "C#",
                            "language": "csharp",
                            "code": "var webhookOut = await chainproto.Webhook.CreateAsync(new WebhookIn{\n    name: \"My first webhook\",\n    uid: \"unique-webhook-identifier\",\n    network: \"eth_mainnet\"\n})"
                        },
                        {
                            "name": "CLI",
                            "language": "shell",
                            "code": "chainproto webhook create '{\n    \"name\": \"My first webhook\",\n    \"uid\": \"unique-webhook-identifier\",\n    \"network\": \"eth_mainnet\"\n}'"
                        },
                        {
                            "name": "cURL",
                            "language": "shell",
                            "code": "curl -X 'POST' \\\n  'https://api.chainproto.io/api/v1/webhooks' \\\n  -H 'X-API-KEY: API_KEY' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first webhook\",\n        \"uid\": \"unique-webhook-identifier\",\n        \"network\": \"eth_mainnet\"\n    }'"
                        }
                    ]
                }
            }
        },

        "/api/v1/addresses/{address_id}": {
            "get": {
                "description": "Get a address.",
                "operationId": "v1.address.get",
                "parameters": [
                    {
                        "description": "The address's ID or UID",
                        "in": "path",
                        "name": "address_id",
                        "required": true,
                        "schema": {
                            "description": "The address's ID or UID",
                            "example": "unique-address-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Get Address",
                "tags": [
                    "Address"
                ],
                "x-readme": {
                    "code-samples": [
                        {
                            "name": "JavaScript",
                            "language": "node",
                            "code": "const addressOut = await chainproto.address.get(\"address_id\");"
                        },
                        {
                            "name": "TypeScript",
                            "language": "node",
                            "code": "const addressOut = await chainproto.address.get(\"address_id\");"
                        },
                        {
                            "name": "Python",
                            "language": "python",
                            "code": "address_out = chainproto.address.get(\"address_id\")"
                        },
                        {
                            "name": "Python (Async)",
                            "language": "python",
                            "code": "address_out = await chainproto.address.get(\"address_id\")"
                        },
                        {
                            "name": "Go",
                            "language": "go",
                            "code": "addressOut, err := chainprotoClient.Address.Get(ctx, \"address_id\")"
                        },
                        {
                            "name": "Kotlin",
                            "language": "kotlin",
                            "code": "val addressOut = chainproto.address.get(\"address_id\")"
                        },
                        {
                            "name": "Java",
                            "language": "java",
                            "code": "AddressOut addressOut = chainproto.getAddress().get(\"address_id\")"
                        },
                        {
                            "name": "Ruby",
                            "language": "ruby",
                            "code": "address_out = chainproto.address.get(\"address_id\")"
                        },
                        {
                            "name": "Rust",
                            "language": "rust",
                            "code": "let address_out = chainproto.address().get(\"address_id\").await?;"
                        },
                        {
                            "name": "C#",
                            "language": "csharp",
                            "code": "var addressOut = await chainproto.Address.GetAsync(\"address_id\")"
                        },
                        {
                            "name": "CLI",
                            "language": "Shell",
                            "code": "chainproto address get \"address_id\""
                        },
                        {
                            "label": "cURL",
                            "language": "shell",
                            "code": "curl -X 'GET' \\\n  'https://api.chainproto.io/api/v1/addresses/{address_id}' \\\n  -H 'X-API-KEY: API_KEY' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                        }
                    ]
                }      
            }
        },
        "/api/v1/addresses": {
            "post": {
                "description": "Create a new address.",
                "operationId": "v1.address.create",
                "parameters": [
                    {
                        "description": "Get an existing address, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing address, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Create Address",
                "tags": [
                    "Address"
                ],
                "x-readme": {
                    "code-samples": [
                        {
                            "name": "JavaScript",
                            "language": "node",
                            "code": "const addressOut = await chainproto.address.create({\n    chain: \"ERC20\",\n    token: \"USDT\",\n    address: \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n});"
                        },
                        {
                            "name": "TypeScript",
                            "language": "node",
                            "code": "const addressOut = await chainproto.address.create({\n    chain: \"ERC20\",\n    token: \"USDT\"\n    address:\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"});"
                        },
                        {
                            "name": "Python",
                            "language": "python",
                            "code": "address_out = chainproto.address.create(AddressIn(\n    chain=\"ERC20\",\n    token=\"USDT\",\n    address=\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n), None)"
                        },
                        {
                            "name": "Python (Async)",
                            "language": "python",
                            "code": "address_out = await chainproto.address.create(AddressIn(\n    chain=\"ERC20\",\n    token=\"USDT\",\n    address=\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n), None)"
                        },
                        {
                            "name": "Go",
                            "language": "go",
                            "code": "addressOut, err := chainprotoClient.Address.Create(ctx, &AddressIn{\n    Chain: \"ERC20\",\n    Token: \"USDT\",\n    Address: \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\",\n})"
                        },
                        {
                            "name": "Kotlin",
                            "language": "kotlin",
                            "code": "val addressOut = chainproto.address.create(AddressIn()\n    .chain(\"ERC20\")\n    .token(\"USDT\")\n    .address(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\")\n)"
                        },
                        {
                            "name": "Java",
                            "language": "java",
                            "code": "AddressOut addressOut = chainproto.getAddress().create(new AddressIn()\n    .chain(\"ERC20\")\n    .token(\"USDT\")\n    .address(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\")\n)"
                        },
                        {
                            "name": "Ruby",
                            "language": "ruby",
                            "code": "address_out = chainproto.address.create(Chainproto::AddressIn.new({\n    \"chain\": \"ERC20\",\n    \"token\": \"USDT\",\n    \"address\": \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n}))"
                        },
                        {
                            "name": "Rust",
                            "language": "rust",
                            "code": "let address_out = chainproto.address().create(AddressIn {\n    chain: \"ERC20\",\n    token: \"USDT\",\n    address: \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\",\n}, None).await?;"
                        },
                        {
                            "name": "C#",
                            "language": "csharp",
                            "code": "var addressOut = await chainproto.Address.CreateAsync(new AddressIn{\n    chain: \"ERC20\",\n    token: \"USDT\",\n    address: \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n})"
                        },
                        {
                            "name": "CLI",
                            "language": "shell",
                            "code": "chainproto address create '{\n    \"chain\": \"ERC20\",\n    \"token\": \"USDT\",\n    \"address\": \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n}'"
                        },
                        {
                            "name": "cURL",
                            "language": "shell",
                            "code": "curl -X 'POST' \\\n  'https://api.chainproto.io/api/v1/addresses' \\\n  -H 'X-API-KEY: API_KEY' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"chain\": \"ERC20\",\n        \"token\": \"USDT\",\n        \"address\": \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\"\n    }'"
                        }
                    ]
                }
            }
        }
    },
    "components": {
        "schemas": {
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "detail"
                ],
                "type": "object"
            },
            "HttpErrorOut": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "detail"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "ValidationError": {
                "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
                "properties": {
                    "loc": {
                        "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "msg": {
                        "description": "The message accompanying the validation error item.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
                        "type": "string"
                    }
                },
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object"
            },
            "WebhookIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "example": "My first webhook",
                        "minLength": 1,
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the webhook",
                        "example": "unique-webhook-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "network": {
                        "description": "Blockchain network",
                        "example": "eth_mainnet",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "network"
                ],
                "type": "object"
            },
            "WebhookOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The webhook's ID",
                        "example": "webhook_1brOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "example": "My first webhook",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The webhook's UID",
                        "example": "unique-webhook-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "network": {
                        "description": "Blockchain network",
                        "example": "eth_mainnet",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "network",
                    "updatedAt"
                ],
                "type": "object"
            },
            "AddressIn": {
                "properties": {
                    "chain": {
                        "description": "blockchain identifier",
                        "example": "ERC20",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "token": {
                        "description": "token symbol",
                        "example": "USDT",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "address": {
                        "description": "address",
                        "example": "TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "chain",
                    "token",
                    "address"
                ],
                "type": "object"
            },
            "AddressOut": {
                "properties": {
                    "id": {
                        "description": "The address's ID",
                        "example": "address_2srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "chain": {
                        "description": "Blockchain identifier",
                        "example": "ERC20",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "token": {
                        "description": "Token symbol",
                        "example": "USDT",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "address": {
                        "description": "address",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "chain",
                    "token",
                    "address",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "x-api-key"
            }
        }
    }
}
